#include <SPI.h>
#include "cargadescargador.h"
#include <SD.h>

/////////////////////////

	
	Adafruit_SH1106 display(OLED_RESET);
	MAX17260 fuelgauge;
	SPIClass POT(2);
	DPOT digitalpot;
	Cargadescargador device;
	bool printedyet=0;
const unsigned char no_sd [] PROGMEM = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xfe, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xfe, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0xc0, 0x1c, 0x00, 0x0e, 0x00, 0x30, 0x06, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0xc0, 0x1c, 0x00, 0x0e, 0x00, 0x30, 0x06, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0xc0, 0x1c, 0x00, 0x0e, 0x00, 0x3f, 0xfe, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0xc0, 0x1c, 0x00, 0x0e, 0x00, 0x3f, 0xfe, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0xc0, 0x1c, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0xc0, 0x1c, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0xc0, 0x1c, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0xc0, 0x1c, 0x00, 0x0e, 0x00, 0x3f, 0xfe, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0xc0, 0x1c, 0x00, 0x0e, 0x00, 0x3f, 0xfe, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0xc0, 0x1c, 0x00, 0x0e, 0x00, 0x30, 0x06, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0xc0, 0x1c, 0x00, 0x0e, 0x00, 0x30, 0x06, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0xc0, 0x1c, 0x00, 0x0e, 0x00, 0x3f, 0xfe, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0xc0, 0x1c, 0x00, 0x0e, 0x00, 0x3f, 0xfe, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xfe, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xfe, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x30, 0x06, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x30, 0x06, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xfe, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0xc0, 0x00, 0x1e, 0x00, 0x00, 0x3f, 0xfe, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0xc0, 0x01, 0xff, 0xe0, 0x00, 0x1f, 0xfc, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0xc0, 0x07, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0xc0, 0x06, 0x00, 0x18, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xfe, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xfe, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x30, 0x06, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x30, 0x06, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xfe, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xfe, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0xc0, 0x00, 0x07, 0xf8, 0x07, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0xc0, 0x00, 0x07, 0xf8, 0x07, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0xc0, 0x00, 0x0e, 0x18, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0xc0, 0x00, 0x0c, 0x18, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0xe0, 0x00, 0x1c, 0x1c, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0xff, 0xff, 0xf8, 0x0f, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x3f, 0xff, 0xf0, 0x0f, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x80, 0x03, 0xcf, 0xc0, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x28, 0x80, 0x06, 0x08, 0x40, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2c, 0x8f, 0x06, 0x08, 0x60, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x24, 0x91, 0x03, 0x88, 0x60, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x26, 0x91, 0x80, 0xc8, 0x60, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x23, 0x91, 0x80, 0x48, 0x40, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x23, 0x91, 0x00, 0xc8, 0xc0, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x21, 0x8e, 0x07, 0x8f, 0x80, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};





void setup() {
  pinsetup();

  digitalWrite(LOAD_ACTIVATE,LOW);//turn off mosfet
  digitalWrite(CHARGER_ENABLE,CHARGER_OFF);//Shutdown charger
  digitalWrite(POT_RESET,HIGH); //NO RESET

  //group alll the begins
  Wire.begin();
  display.begin(SH1106_SWITCHCAPVCC, 0x3C);
  configdisplay();
  POT.begin();//Initialize the SPI_2 port.
  POT.setBitOrder(MSBFIRST); // Set the SPI_2 bit order
  POT.setDataMode(SPI_MODE0); //Set the  SPI_2 data mode 1
  POT.setClockDivider(SPI_CLOCK_DIV16);
  
  Serial.begin(9600);
  device.setMode(0);
   
   if(setChargeCurrent(digitalpot.chargeCurrent)){ //initialize the digital pot with default values
  	display.println("error current set");
  	display.display();
  	while(1); //error handler
  }

  if(setIdet(digitalpot.idetCurrent)){ //initialize the digital pot with default values
  	display.println("error idet set");
  	display.display();
  	while(1); //error handler
  }



  if(fuelgauge.isAlive()){  //check if battery is present
  	device.battery_present=1;
  	if(fuelgauge.checkPOR()){
  		fuelgauge.setup(1500,75,3.0,3.1);
  	}
  }else{
  	device.battery_present=0;
  	display.println("battery detached");
  }
  if(!checkSD()){
  	device.SD_present=0;
  //	display.println("NO SD CARD BE CAREFUL");
  	display.clearDisplay();
  	display.setCursor(0,0);
  	display.drawBitmap(0,0, no_sd ,128,64,1);
  	display.display();
  	delay(3000);
  }else{
  	device.SD_init=1;
  	display.println("All ok");
  	display.display();
  	delay(1000);
  }
}





void loop() {
	operation();
	communication();
}























void configdisplay(){
  display.setTextSize(1);
  display.setTextColor(WHITE); 
  display.clearDisplay();
  display.setCursor(0,0);
  display.println("display ok");
  display.display();
}

void pinsetup(){
 	pinMode(LOAD_ACTIVATE, OUTPUT);
 	#ifndef TP4056
		pinMode(CHARGER_OUT, OUTPUT);
		digitalWrite(CHARGER_OUT, HIGH);
		pinMode(CHARGER_IN, INPUT);
		pinMode(CHARGER_ENABLE, OUTPUT);
		pinMode(CHARGER_FAULT, INPUT);
	#else
		pinMode(CHARGER_ENABLE, OUTPUT);
		pinMode(STDBY,INPUT);
		pinMode(CHRG,INPUT);
	#endif

	pinMode(POT_RESET,OUTPUT);
	pinMode(POT_CS,OUTPUT);
	digitalWrite(POT_CS, HIGH);
	pinMode(CHARGER_ALERT, INPUT);
	pinMode(SD_DETECT,INPUT_PULLUP);

	}

bool setChargeCurrent(float current){
	#ifndef TP4056
	int temp=1109.895f/current;
	//from datasheet
	if (current>MAX_CURRENT || temp<89){
		return 1;  //charge current cannot be larger than the max current
			//also pot cannot go lower than 89
	}
	
	else{
		digitalpot.progresistance=temp;
		digitalpot.chargeCurrent=current;
		uint8_t data=-0.0272f*digitalpot.progresistance + 256.09f;;
		digitalWrite(POT_CS, LOW);
		POT.transfer(0x01);
		POT.transfer(data);
		digitalWrite(POT_CS, HIGH);
		return 0;
	}
	#else
	int temp=1161.2*(pow(current,-1.045));
	if (current>MAX_CURRENT || temp<89){
		return 1;  //charge current cannot be larger than the max current
			//also pot cannot go lower than 89
	}
	else{
		digitalpot.progresistance=temp;
		digitalpot.idetresistance=temp;
		digitalpot.chargeCurrent=current;
		digitalpot.idetCurrent=current/10;
		uint8_t data=-0.0272f*digitalpot.progresistance + 256.09f;
		digitalWrite(POT_CS, LOW);
		POT.transfer(0x00);
		POT.transfer(data);
		digitalWrite(POT_CS, HIGH);
		return 0;
	}

	#endif
}

	bool setIdet(float current){//this diital pot will be used for the new charger

		int temp=110.9895f/current; //from datasheet
		if (current>MAX_CURRENT || current>=digitalpot.chargeCurrent || temp<89){
			return 1;  //idet cannot be larger than charge current or even larger than the max current
			//also pot cannot go lower than 89
		}
		else{
			digitalpot.idetresistance=temp;
			digitalpot.idetCurrent=current;
			
			uint8_t data= -0.0272f*digitalpot.idetresistance + 256.09f;//calculated from table in datasheet
			digitalWrite(POT_CS, LOW);
			POT.transfer(0x00);
			POT.transfer(data);
			digitalWrite(POT_CS, HIGH);
			return 0;
		}
		
	}

	void printMode(){
		switch(device.mode){
	  	case 0:{
  			display.print("Standby");
  			break;
  		}

  		case 1:{
  			display.print("Charging");
	  		break;		
  		}
  		
  		case 2:{
  			display.print("Discharging");
  			break;
  		}
  	}
}



void operation(){

	if(fuelgauge.isAlive()){  //check if battery is present
		device.battery_present=1;




		if(fuelgauge.checkPOR()){
		 	fuelgauge.setup(1500,75,3.0,3.1);//reinitialize if the fuelgauge has been reset
		}

		fuelgauge.poll();  //update values
	 	 	/*display and clear display are strategically separated by the time we use doing things
	 	 	like polling the fuel gauge and doing other checks that dont involve manipulating the 
	 	 	frame buffer*/
	
		
		display.clearDisplay(); 
		display.setCursor(0,0);

	
		
		if(checkSD()){
			display.print("Batt conn");
			display.println("/ SD conn");
		}
		else{
			display.println("Batt conn");
		}
		printMode();
		display.println();
		if(device.serialconnected==1){
		display.println("Serial connected");
		}

		display.print(fuelgauge.remainingCapacity);
		display.print(" mah   ");
		display.print(fuelgauge.reportedSOC);
		display.println("%");
		display.print(fuelgauge.cellVoltage,5);
		display.println(" V");
		display.print(fuelgauge.Current,5);
		display.println(" A");
		display.print("Cycles:");
		display.println(device.cycles);

		if(device.test_running){

			if(!device.battery_prepared){
				device.setMode(2); //discharge battery
				if(fuelgauge.avgVoltage<=MIN_CELL_V){//bring down the cell to the minimum battery voltage
					device.battery_prepared=1;
					device.setMode(0);//standby
					delay(500);
				}
			}
			else{
				if(device.cycles>0){
					switch(device.mode){
						case 0:{
							device.setMode(1);//start charging
							delay(1000); //wait 10 miliseconds to help the charger stablish its current past the next threshold
							break;
						}
						case 1:{
							if(fuelgauge.avgVoltage>=4.24){//probably is done charging
								device.setMode(2);
								delay(2000);//wait for the current to fall
							}
							break;
						}
						case 2:{
							if(fuelgauge.avgVoltage<=MIN_CELL_V){
								device.cycles--;
								device.setMode(1);
							delay(2000);//wait for the current to rise
							}
							break;
						}

					}
				}
				else{
					device.setMode(0);
					device.battery_prepared=0;
					device.test_running=0;
					device.chitchat=0;
				}
			}
		}
	}
	
	else{
		display.clearDisplay(); 
		display.setCursor(0,0);
		device.battery_present=0;
		display.println("battery detached");
	}


	//////////////////this is a resistor test/////////////////////////
	
	/*if(Serial.available()>0){
		uint8_t temp_test=Serial.parseInt();
		if(temp_test!=0){
			test=temp_test;
		}
	}
	digitalWrite(POT_CS, LOW);
	POT.transfer(0x00);
	POT.transfer(test);
	digitalWrite(POT_CS, HIGH);

	digitalWrite(POT_CS, LOW);
	POT.transfer(0x01);
	POT.transfer(test);
	digitalWrite(POT_CS, HIGH);

	display.clearDisplay();
	display.setCursor(0,0);
	display.print(test);*/
	display.display();


}

	void communication(){
		if (Serial){
			while(Serial.available()){
				switch(Serial.read()){
					case 'A':{ //discover device
						device.serialconnected=1;
						Serial.write('a');
						break;
					}

					case 'B':{
						if(setChargeCurrent(Serial.parseFloat())){
							Serial.write('B');

						}
						else{
							Serial.write('b');
						}
						break;
					}

					case 'C':{
						if(setIdet(Serial.parseFloat())){
							Serial.write('C');

						}
						else{
							Serial.write('c');
						}
						break;
					}
					case 'D':{
						device.loadresistor=(Serial.parseFloat());
						Serial.write('d');
						break;
					}

					case 'E':{
						Serial.read(); //waste separator
						device.setMode(Serial.parseInt());
						device.chitchat=1;
						Serial.write('e');
						break;
					}

					case 'F':{
						device.cycles=Serial.parseInt();
						Serial.write('f');
						break;
					}
					case 'G':{
						Serial.write('g');    //next command should be H but we are idiots and forgot about a whole letter
						Serial.print("I ");
						Serial.print(device.mode);
						break;
					}


					case 'R':{
						device.chitchat=1;
						device.test_running=1;
						Serial.write('r');
						break;
					}
					case 'S':{
						device.setMode(0);
						device.test_running=0;
						device.chitchat=0;
						Serial.write('s');
						break;
					}
					case 'T':{
						device.chitchat_time=Serial.parseInt();
						Serial.write('t');
						break;
					}
				}
			}
			if((millis()/1000)%device.chitchat_time==0 && device.chitchat==1){//print for test TO DO: change it based on timer request
				if(printedyet==0){

					/*Serial.print(MIN_CELL_V);
					Serial.print(",");
					Serial.print(digitalpot.idetCurrent);
					Serial.print(",");		
		  			Serial.print(fuelgauge.Current,5);
		  			Serial.print(",");
		  			Serial.print(fuelgauge.cellVoltage,5);
		  			Serial.print(",");
		  			Serial.println(4.2);*/
		  			if(checkSD()){
		  				File dataFile = SD.open("datalog.csv", FILE_WRITE);
		  			 	if (dataFile) {
		  			 		dataFile.print(fuelgauge.cellVoltage,4);
		  					dataFile.print(',');
		  					dataFile.print(fuelgauge.Current,4);
		  					dataFile.print(',');
		  					dataFile.print(fuelgauge.Temp); 
		  					dataFile.print(',');
		  					dataFile.print(fuelgauge.avgVoltage,4);
		  					dataFile.print(',');
		  					dataFile.print(fuelgauge.avgCurrent,4);
		  					dataFile.print(',');
		  					dataFile.print(fuelgauge.avgTemp); 
		  					dataFile.print(',');
		  					dataFile.println(fuelgauge.coulombCounter);
		  		
   							dataFile.close();
					  }
		  			}

		  			Serial.print('Q');
		  			Serial.print('\n');
		  			Serial.print(fuelgauge.cellVoltage,4);
		  			Serial.print('\n');
		  			Serial.print(fuelgauge.Current,4);
		  			Serial.print('\n');
		  			Serial.print(fuelgauge.Temp); 
		  			Serial.print('\n');
		  			Serial.print(fuelgauge.avgVoltage,4);
		  			Serial.print('\n');
		  			Serial.print(fuelgauge.avgCurrent,4);
		  			Serial.print('\n');
		  			Serial.print(fuelgauge.avgTemp); 
		  			Serial.print('\n');
		  			Serial.print(fuelgauge.coulombCounter);
		  			Serial.print('\n');
		  			printedyet=1;
				}
			}

			else{
				printedyet=0;
			}
		}
		else{
			device.serialconnected=0;
		}
	}

bool checkSD(){
	if(digitalRead(SD_DETECT)==0){
		device.SD_present=1;
		if(device.SD_init==0){
			if(SD.begin()){
				device.SD_init=1;
				return 1;
			}
			else{
				return 0;
			}

		}
		return 1;

	}
	else{
		device.SD_present=0;
		device.SD_init=0;
		return 0;
	}
}










